import { Injectable, OnApplicationBootstrap } from '@nestjs/common';
import * as TelegramBot from 'node-telegram-bot-api';

import { appConfig } from 'src/config';

@Injectable()
export class TelegramService implements OnApplicationBootstrap {
  private readonly telegramBot: TelegramBot;

  private readonly federations = ['üáÆüáπ –ò—Ç–∞–ª–∏—è', 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è'];
  private readonly teams = {
    'üáÆüáπ –ò—Ç–∞–ª–∏—è': ['–ö–æ–º–∞–Ω–¥–∞ –ê', '–ö–æ–º–∞–Ω–¥–∞ –ë'],
    'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è': ['–ö–æ–º–∞–Ω–¥–∞ –í', '–ö–æ–º–∞–Ω–¥–∞ –ì'],
  };
  private readonly players = {
    '–ö–æ–º–∞–Ω–¥–∞ –ê': ['–ò–≥—Ä–æ–∫ 1', '–ò–≥—Ä–æ–∫ 2'],
    '–ö–æ–º–∞–Ω–¥–∞ –ë': ['–ò–≥—Ä–æ–∫ 3', '–ò–≥—Ä–æ–∫ 4'],
    '–ö–æ–º–∞–Ω–¥–∞ –í': ['–ò–≥—Ä–æ–∫ 5', '–ò–≥—Ä–æ–∫ 6'],
    '–ö–æ–º–∞–Ω–¥–∞ –ì': ['–ò–≥—Ä–æ–∫ 7', '–ò–≥—Ä–æ–∫ 8'],
  };

  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {chatId: {team: [players]}}
  private monitoredPlayers: Record<number, Record<string, string[]>> = {};

  constructor() {
    this.telegramBot = new TelegramBot(appConfig.tg.token, { polling: true });
  }

  async onApplicationBootstrap() {
    this.telegramBot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      this.sendMainMenu(chatId);
    });

    this.telegramBot.on('callback_query', async (callbackQuery) => {
      const msg = callbackQuery.message;
      const data = callbackQuery.data;

      if (!msg || !data) return;

      const [action, ...payload] = data.split(':');
      const chatId = msg.chat.id;

      switch (action) {
        case 'select_federation_menu':
          this.sendFederations(chatId);
          break;
        case 'select_federation':
          this.sendTeams(chatId, payload[0]);
          break;
        case 'select_team':
          this.sendPlayers(chatId, payload[0]);
          break;
        case 'toggle_player':
          this.togglePlayer(chatId, payload[0], payload[1]);
          break;
        case 'stop_monitoring':
          this.stopMonitoring(chatId, payload[0]);
          break;
        case 'back_to_main':
          this.sendMainMenu(chatId);
          break;
        case 'back_to_federations':
          this.sendFederations(chatId);
          break;
        case 'back_to_teams':
          this.sendTeams(chatId, payload[0]);
          break;
        case 'view_monitoring':
          this.sendMonitoringStatus(chatId);
          break;
      }

      this.telegramBot.answerCallbackQuery(callbackQuery.id);
    });
  }

  private togglePlayer(chatId: number, team: string, player: string) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (!this.monitoredPlayers[chatId]) {
      this.monitoredPlayers[chatId] = {};
    }
    if (!this.monitoredPlayers[chatId][team]) {
      this.monitoredPlayers[chatId][team] = [];
    }

    const playerIndex = this.monitoredPlayers[chatId][team].indexOf(player);
    if (playerIndex === -1) {
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      this.monitoredPlayers[chatId][team].push(player);
    } else {
      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      this.monitoredPlayers[chatId][team].splice(playerIndex, 1);
      // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã - —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
      if (this.monitoredPlayers[chatId][team].length === 0) {
        delete this.monitoredPlayers[chatId][team];
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    this.sendPlayers(chatId, team);
  }

  private stopMonitoring(chatId: number, team: string) {
    if (this.monitoredPlayers[chatId] && this.monitoredPlayers[chatId][team]) {
      delete this.monitoredPlayers[chatId][team];
    }
    this.sendTeams(
      chatId,
      Object.keys(this.teams).find((federation) =>
        this.teams[federation].includes(team),
      ),
    );
  }

  private sendMainMenu(chatId: number) {
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
            callback_data: 'select_federation_menu',
          },
        ],
        [
          {
            text: 'üëÅÔ∏è –¢–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
            callback_data: 'view_monitoring',
          },
        ],
      ],
    };
    this.telegramBot.sendMessage(
      chatId,
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      { reply_markup: keyboard },
    );
  }

  private sendFederations(chatId: number) {
    const keyboard = this.federations.map((federation) => [
      {
        text: federation,
        callback_data: `select_federation:${federation}`,
      },
    ]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }]);

    this.telegramBot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–µ–¥–µ—Ä–∞—Ü–∏—é:', {
      reply_markup: {
        inline_keyboard: keyboard,
      },
    });
  }

  private sendTeams(chatId: number, federation: string) {
    const teamList = this.teams[federation] || [];
    const keyboard = teamList.map((team) => [
      {
        text: team,
        callback_data: `select_team:${team}`,
      },
    ]);
    keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_federations' }]);

    this.telegramBot.sendMessage(
      chatId,
      `–§–µ–¥–µ—Ä–∞—Ü–∏—è: ${federation}\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:`,
      {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      },
    );
  }

  private sendPlayers(chatId: number, team: string) {
    const playerList = this.players[team] || [];
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä—è—â–∏—Ö—Å—è –∏–≥—Ä–æ–∫–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å undefined –µ—Å–ª–∏ —á–∞—Ç/–∫–æ–º–∞–Ω–¥–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
    const monitoredPlayers = this.monitoredPlayers[chatId]?.[team] || [];

    const keyboard = playerList.map((player) => [
      {
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º ‚ùå –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ, ‚úÖ –µ—Å–ª–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ
        text: `${monitoredPlayers.includes(player) ? '‚úÖ' : '‚ùå'} ${player}`,
        callback_data: `toggle_player:${team}:${player}`,
      },
    ]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã", –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if (monitoredPlayers.length > 0) {
      keyboard.push([
        {
          text: 'üö´ –ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã',
          callback_data: `stop_monitoring:${team}`,
        },
      ]);
    }

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const federation = Object.keys(this.teams).find((f) =>
      this.teams[f].includes(team),
    );
    keyboard.push([
      { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `back_to_teams:${federation}` },
      { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' },
    ]);

    this.telegramBot.sendMessage(
      chatId,
      `–ö–æ–º–∞–Ω–¥–∞: ${team}\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:\n(‚ùå - –Ω–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è, ‚úÖ - –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è)`,
      {
        reply_markup: {
          inline_keyboard: keyboard,
        },
      },
    );
  }

  private sendMonitoringStatus(chatId: number) {
    const monitored = this.monitoredPlayers[chatId];

    if (!monitored || Object.keys(monitored).length === 0) {
      this.telegramBot.sendMessage(
        chatId,
        '–°–µ–π—á–∞—Å —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤.',
        {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: 'üîç –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
                  callback_data: 'select_federation_menu',
                },
              ],
              [{ text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' }],
            ],
          },
        },
      );
      return;
    }

    let message = 'üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:\n\n';

    for (const [team, players] of Object.entries(monitored)) {
      const federation = Object.keys(this.teams).find((f) =>
        this.teams[f].includes(team),
      );

      message += `*${federation} - ${team}:*\n`;
      message += players.map((p) => `‚Ä¢ ${p}`).join('\n');
      message += '\n\n';
    }

    const keyboard = [
      [
        {
          text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
          callback_data: 'select_federation_menu',
        },
        { text: 'üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é', callback_data: 'back_to_main' },
      ],
    ];

    this.telegramBot.sendMessage(chatId, message, {
      parse_mode: 'Markdown',
      reply_markup: { inline_keyboard: keyboard },
    });
  }
}
